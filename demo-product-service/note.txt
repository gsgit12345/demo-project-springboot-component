===============testing the product service request and url=======
{
    "name":"ramesh",
    "description":"hello product",
    "price":1200
}

url:-http://localhost:8080/api/product

===================testing the order-service request and url==============
url:-http://localhost:8081/api/order

{
    "orderLineItemsDtoList":[
        {
       "skuCode":"REdminote",
       "price":3000,
       "quantity": 1

        }
    ]
}

//https://www.appsdeveloperblog.com/integration-testing-with-spring-boot-mysql-and-testcontainers/

writing test of dockerized application

https://simranchawla.com/integration-testing-docker-maven-plugin-vs-testcontainers/
very importent
Enable client side loadbalancing in eureka.In case of the multiple version of the service we need the client side load balancing.other wise would not able to resolve
where we have to send the request for execution and not able to select particular service from multiple instances
===Eureka DashBoard=================
http://localhost:8761/

https://javatodev.com/microservices-service-registration-and-discovery-with-spring-cloud-netflix-eureka/

https://java.testcontainers.org/
testcontainers with java

https://www.youtube.com/watch?v=lh1oQHXVSc0&list=PLSVW22jAG8pBnhAdq9S8BpLnZ0_jVBj0c    ---tutorial source

ServiceDiscoveryPattern in microservice

https://www.youtube.com/watch?v=--nQfs67zCM   --testing in springboot using junit


https://github.com/SaiUpadhyayula?tab=overview&from=2023-06-01&to=2023-06-30     --githublink for the tutorial

https://projectlombok.org/features/


RestTemplate and WebClient :-both are used in synchronous communication.It is good to use the WebClient because it supports synch,asynch,streaming communication.



#product service route
spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

#order service route
spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order


#inventory service route
spring.cloud.gateway.routes[2].id=inventory-service
spring.cloud.gateway.routes[2].uri=lb://inventory-service
spring.cloud.gateway.routes[2].predicates[0]=Path="/api/inventory"

===========hitting the using api gateway=====
http://localhost:8080/api/product